name: CI

on:
  pull_request:
  push:
    branches: ['master']
  release:
    types:
      - published

jobs:
  lint:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Lint code
        run: sbt scalafmtCheckAll

  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        java: ['adopt@1.8', 'adopt@1.11']
        scala: ['2.13.3', '2.12.12']
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: olafurpg/setup-scala@v13
      with:
        java-version: ${{ matrix.java }}
    - name: Cache scala dependencies
      uses: coursier/cache-action@v6
    - name: Run tests
      run: sbt ++${{ matrix.scala }}! test
    - name: Run integration tests
      run: sbt ++${{ matrix.scala }}! it:test

  mdoc:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    #if: github.event_name != 'pull_request'
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Setup GPG
        uses: olafurpg/setup-gpg@v3
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Check Document Generation
        run: ./sbt docs/docusaurusCreateSite
      - name: Publish docs to Github
        run: ./sbt docs/docusaurusPublishGhpages
        env:
          GIT_DEPLOY_KEY: ${{ secrets.GIT_DEPLOY_KEY }}

  publish:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs: [build,lint]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - uses: olafurpg/setup-scala@v13
      - run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
